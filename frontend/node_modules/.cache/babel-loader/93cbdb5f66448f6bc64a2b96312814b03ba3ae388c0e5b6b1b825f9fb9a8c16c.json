{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BHUPENDRA SAINI\\\\Downloads\\\\video conferencing\\\\frontend\\\\src\\\\components\\\\Room.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport Peer from \"peerjs\";\nimport VideoPlayer from \"./VideoPlayer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Room = ({\n  username,\n  onLogout\n}) => {\n  _s();\n  const [myStream, setMyStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState([]);\n  const [peerIdToCall, setPeerIdToCall] = useState(\"\");\n  const [myPeerId, setMyPeerId] = useState(\"\");\n  const [muted, setMuted] = useState(false);\n  const [videoOff, setVideoOff] = useState(false);\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\n  const peerRef = useRef(null);\n  const currentCallRefs = useRef([]); // Keep track of current calls for cleanup or replacing tracks\n  const screenStreamRef = useRef(null); // Reference to screen stream\n\n  useEffect(() => {\n    const init = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        setMyStream(stream);\n        peerRef.current = new Peer();\n        peerRef.current.on(\"open\", id => {\n          setMyPeerId(id);\n          console.log(\"My peer ID:\", id);\n        });\n        peerRef.current.on(\"call\", call => {\n          call.answer(stream);\n          currentCallRefs.current.push(call);\n          call.on(\"stream\", remoteStream => {\n            setRemoteStreams(prev => {\n              if (!prev.some(s => s.id === remoteStream.id)) {\n                return [...prev, remoteStream];\n              }\n              return prev;\n            });\n          });\n          call.on(\"close\", () => {\n            setRemoteStreams(prev => prev.filter(s => {\n              var _call$remoteStream;\n              return s.id !== ((_call$remoteStream = call.remoteStream) === null || _call$remoteStream === void 0 ? void 0 : _call$remoteStream.id);\n            }));\n          });\n        });\n        peerRef.current.on(\"error\", err => {\n          console.error(err);\n        });\n      } catch (err) {\n        alert(\"Could not access camera or microphone. Please check permissions.\");\n      }\n    };\n    init();\n    return () => {\n      if (peerRef.current) peerRef.current.destroy();\n      if (myStream) myStream.getTracks().forEach(track => track.stop());\n      if (screenStreamRef.current) screenStreamRef.current.getTracks().forEach(track => track.stop());\n    };\n  }, []);\n\n  // Toggle mute/unmute microphone\n  const toggleMute = () => {\n    if (!myStream) return;\n    myStream.getAudioTracks().forEach(track => {\n      track.enabled = !track.enabled;\n    });\n    setMuted(!muted);\n  };\n\n  // Toggle video on/off\n  const toggleVideo = () => {\n    if (!myStream) return;\n    myStream.getVideoTracks().forEach(track => {\n      track.enabled = !track.enabled;\n    });\n    setVideoOff(!videoOff);\n  };\n\n  // Start screen sharing and replace video track in all calls\n  const startScreenShare = async () => {\n    if (isScreenSharing) {\n      stopScreenShare();\n      return;\n    }\n    try {\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({\n        video: true,\n        audio: false\n      });\n      screenStreamRef.current = screenStream;\n      setIsScreenSharing(true);\n\n      // Replace tracks in outgoing calls\n      currentCallRefs.current.forEach(call => {\n        const sender = call.peerConnection.getSenders().find(s => s.track.kind === \"video\");\n        if (sender) {\n          sender.replaceTrack(screenStream.getVideoTracks()[0]);\n        }\n      });\n\n      // Replace local video track stream preview for the user\n      setMyStream(prevStream => {\n        // Stop current video tracks to avoid hardware conflicts\n        prevStream.getVideoTracks().forEach(t => t.enabled = false);\n        // Merge audio tracks from old stream with screen video\n        const newStream = new MediaStream([...prevStream.getAudioTracks(), ...screenStream.getVideoTracks()]);\n        return newStream;\n      });\n\n      // When user stops sharing screen\n      screenStream.getVideoTracks()[0].addEventListener(\"ended\", () => {\n        stopScreenShare();\n      });\n    } catch (err) {\n      console.error(\"Screen sharing error:\", err);\n      alert(\"Screen sharing failed or was cancelled.\");\n    }\n  };\n\n  // Stop screen sharing and revert to camera video track\n  const stopScreenShare = async () => {\n    if (screenStreamRef.current) {\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\n      screenStreamRef.current = null;\n    }\n    if (!peerRef.current) return;\n    if (!myStream) return;\n\n    // Get fresh camera video and audio tracks again\n    try {\n      const cameraStream = await navigator.mediaDevices.getUserMedia({\n        video: true,\n        audio: true\n      });\n\n      // Replace tracks in outgoing calls\n      currentCallRefs.current.forEach(call => {\n        const sender = call.peerConnection.getSenders().find(s => s.track.kind === \"video\");\n        if (sender) {\n          sender.replaceTrack(cameraStream.getVideoTracks()[0]);\n        }\n        const audioSender = call.peerConnection.getSenders().find(s => s.track.kind === \"audio\");\n        if (audioSender) {\n          audioSender.replaceTrack(cameraStream.getAudioTracks()[0]);\n        }\n      });\n      setMyStream(cameraStream);\n      setIsScreenSharing(false);\n      setMuted(false);\n      setVideoOff(false);\n    } catch (err) {\n      console.error(\"Failed to revert to camera:\", err);\n    }\n  };\n\n  // Call peer ID entered by user\n  const callPeer = () => {\n    if (!peerIdToCall || !myStream) return;\n    const call = peerRef.current.call(peerIdToCall, myStream);\n    currentCallRefs.current.push(call);\n    call.on(\"stream\", remoteStream => {\n      setRemoteStreams(prev => {\n        if (!prev.some(s => s.id === remoteStream.id)) {\n          return [...prev, remoteStream];\n        }\n        return prev;\n      });\n    });\n    call.on(\"close\", () => {\n      setRemoteStreams(prev => prev.filter(s => {\n        var _call$remoteStream2;\n        return s.id !== ((_call$remoteStream2 = call.remoteStream) === null || _call$remoteStream2 === void 0 ? void 0 : _call$remoteStream2.id);\n      }));\n    });\n  };\n\n  // Leave call - clean up everything\n  const leaveCall = () => {\n    currentCallRefs.current.forEach(call => {\n      call.close();\n    });\n    currentCallRefs.current = [];\n    setRemoteStreams([]);\n    if (myStream) {\n      myStream.getTracks().forEach(track => track.stop());\n      setMyStream(null);\n    }\n    if (peerRef.current) {\n      peerRef.current.destroy();\n      peerRef.current = null;\n    }\n    onLogout();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Welcome, \", username, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: leaveCall,\n        style: {\n          background: \"red\",\n          color: \"white\",\n          padding: \"8px\"\n        },\n        children: \"Leave Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Your Peer ID: \", /*#__PURE__*/_jsxDEV(\"b\", {\n        children: myPeerId\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 24\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Enter peer ID to call\",\n        value: peerIdToCall,\n        onChange: e => setPeerIdToCall(e.target.value),\n        style: {\n          marginRight: 10,\n          padding: \"6px 8px\",\n          width: 250\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: callPeer,\n        style: {\n          padding: \"6px 12px\"\n        },\n        children: \"Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"10px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleMute,\n        style: {\n          backgroundColor: muted ? \"red\" : \"green\",\n          color: \"white\",\n          marginRight: 10,\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        title: muted ? \"Unmute Microphone\" : \"Mute Microphone\",\n        children: muted ? \"Unmute Mic\" : \"Mute Mic\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVideo,\n        style: {\n          backgroundColor: videoOff ? \"red\" : \"green\",\n          color: \"white\",\n          marginRight: 10,\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        title: videoOff ? \"Turn Video On\" : \"Turn Video Off\",\n        children: videoOff ? \"Start Video\" : \"Stop Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startScreenShare,\n        style: {\n          backgroundColor: isScreenSharing ? \"#5555ff\" : \"#007bff\",\n          color: \"white\",\n          padding: \"8px 16px\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\"\n        },\n        title: \"Share Screen\",\n        children: isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Your Video\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 9\n      }, this), myStream ? /*#__PURE__*/_jsxDEV(VideoPlayer, {\n        stream: myStream,\n        isMuted: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading your video...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 72\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Remote Videos\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\"\n        },\n        children: remoteStreams.map((stream, idx) => /*#__PURE__*/_jsxDEV(VideoPlayer, {\n          stream: stream,\n          isMuted: false\n        }, idx, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 276,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n_s(Room, \"FPYV7eaorMtrnjr0pbBFYCbm3H8=\");\n_c = Room;\nexport default Room;\nvar _c;\n$RefreshReg$(_c, \"Room\");","map":{"version":3,"names":["React","useEffect","useState","useRef","Peer","VideoPlayer","jsxDEV","_jsxDEV","Room","username","onLogout","_s","myStream","setMyStream","remoteStreams","setRemoteStreams","peerIdToCall","setPeerIdToCall","myPeerId","setMyPeerId","muted","setMuted","videoOff","setVideoOff","isScreenSharing","setIsScreenSharing","peerRef","currentCallRefs","screenStreamRef","init","stream","navigator","mediaDevices","getUserMedia","video","audio","current","on","id","console","log","call","answer","push","remoteStream","prev","some","s","filter","_call$remoteStream","err","error","alert","destroy","getTracks","forEach","track","stop","toggleMute","getAudioTracks","enabled","toggleVideo","getVideoTracks","startScreenShare","stopScreenShare","screenStream","getDisplayMedia","sender","peerConnection","getSenders","find","kind","replaceTrack","prevStream","t","newStream","MediaStream","addEventListener","cameraStream","audioSender","callPeer","_call$remoteStream2","leaveCall","close","style","padding","children","display","justifyContent","alignItems","fileName","_jsxFileName","lineNumber","columnNumber","onClick","background","color","marginBottom","type","placeholder","value","onChange","e","target","marginRight","width","margin","backgroundColor","borderRadius","cursor","title","isMuted","flexWrap","map","idx","_c","$RefreshReg$"],"sources":["C:/Users/BHUPENDRA SAINI/Downloads/video conferencing/frontend/src/components/Room.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport Peer from \"peerjs\";\r\nimport VideoPlayer from \"./VideoPlayer\";\r\n\r\nconst Room = ({ username, onLogout }) => {\r\n  const [myStream, setMyStream] = useState(null);\r\n  const [remoteStreams, setRemoteStreams] = useState([]);\r\n  const [peerIdToCall, setPeerIdToCall] = useState(\"\");\r\n  const [myPeerId, setMyPeerId] = useState(\"\");\r\n  const [muted, setMuted] = useState(false);\r\n  const [videoOff, setVideoOff] = useState(false);\r\n  const [isScreenSharing, setIsScreenSharing] = useState(false);\r\n\r\n  const peerRef = useRef(null);\r\n  const currentCallRefs = useRef([]); // Keep track of current calls for cleanup or replacing tracks\r\n  const screenStreamRef = useRef(null); // Reference to screen stream\r\n\r\n  useEffect(() => {\r\n    const init = async () => {\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n        setMyStream(stream);\r\n\r\n        peerRef.current = new Peer();\r\n\r\n        peerRef.current.on(\"open\", (id) => {\r\n          setMyPeerId(id);\r\n          console.log(\"My peer ID:\", id);\r\n        });\r\n\r\n        peerRef.current.on(\"call\", (call) => {\r\n          call.answer(stream);\r\n          currentCallRefs.current.push(call);\r\n\r\n          call.on(\"stream\", (remoteStream) => {\r\n            setRemoteStreams((prev) => {\r\n              if (!prev.some((s) => s.id === remoteStream.id)) {\r\n                return [...prev, remoteStream];\r\n              }\r\n              return prev;\r\n            });\r\n          });\r\n\r\n          call.on(\"close\", () => {\r\n            setRemoteStreams((prev) => prev.filter(s => s.id !== call.remoteStream?.id));\r\n          });\r\n        });\r\n\r\n        peerRef.current.on(\"error\", (err) => {\r\n          console.error(err);\r\n        });\r\n      } catch (err) {\r\n        alert(\"Could not access camera or microphone. Please check permissions.\");\r\n      }\r\n    };\r\n\r\n    init();\r\n\r\n    return () => {\r\n      if (peerRef.current) peerRef.current.destroy();\r\n      if (myStream) myStream.getTracks().forEach(track => track.stop());\r\n      if (screenStreamRef.current) screenStreamRef.current.getTracks().forEach(track => track.stop());\r\n    };\r\n  }, []);\r\n\r\n  // Toggle mute/unmute microphone\r\n  const toggleMute = () => {\r\n    if (!myStream) return;\r\n    myStream.getAudioTracks().forEach(track => {\r\n      track.enabled = !track.enabled;\r\n    });\r\n    setMuted(!muted);\r\n  };\r\n\r\n  // Toggle video on/off\r\n  const toggleVideo = () => {\r\n    if (!myStream) return;\r\n    myStream.getVideoTracks().forEach(track => {\r\n      track.enabled = !track.enabled;\r\n    });\r\n    setVideoOff(!videoOff);\r\n  };\r\n\r\n  // Start screen sharing and replace video track in all calls\r\n  const startScreenShare = async () => {\r\n    if (isScreenSharing) {\r\n      stopScreenShare();\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const screenStream = await navigator.mediaDevices.getDisplayMedia({ video: true, audio: false });\r\n      screenStreamRef.current = screenStream;\r\n      setIsScreenSharing(true);\r\n\r\n      // Replace tracks in outgoing calls\r\n      currentCallRefs.current.forEach(call => {\r\n        const sender = call.peerConnection.getSenders().find(s => s.track.kind === \"video\");\r\n        if (sender) {\r\n          sender.replaceTrack(screenStream.getVideoTracks()[0]);\r\n        }\r\n      });\r\n\r\n      // Replace local video track stream preview for the user\r\n      setMyStream((prevStream) => {\r\n        // Stop current video tracks to avoid hardware conflicts\r\n        prevStream.getVideoTracks().forEach(t => t.enabled = false);\r\n        // Merge audio tracks from old stream with screen video\r\n        const newStream = new MediaStream([\r\n          ...prevStream.getAudioTracks(),\r\n          ...screenStream.getVideoTracks(),\r\n        ]);\r\n        return newStream;\r\n      });\r\n\r\n      // When user stops sharing screen\r\n      screenStream.getVideoTracks()[0].addEventListener(\"ended\", () => {\r\n        stopScreenShare();\r\n      });\r\n    } catch (err) {\r\n      console.error(\"Screen sharing error:\", err);\r\n      alert(\"Screen sharing failed or was cancelled.\");\r\n    }\r\n  };\r\n\r\n  // Stop screen sharing and revert to camera video track\r\n  const stopScreenShare = async () => {\r\n    if (screenStreamRef.current) {\r\n      screenStreamRef.current.getTracks().forEach(track => track.stop());\r\n      screenStreamRef.current = null;\r\n    }\r\n\r\n    if (!peerRef.current) return;\r\n    if (!myStream) return;\r\n\r\n    // Get fresh camera video and audio tracks again\r\n    try {\r\n      const cameraStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true });\r\n      \r\n      // Replace tracks in outgoing calls\r\n      currentCallRefs.current.forEach(call => {\r\n        const sender = call.peerConnection.getSenders().find(s => s.track.kind === \"video\");\r\n        if (sender) {\r\n          sender.replaceTrack(cameraStream.getVideoTracks()[0]);\r\n        }\r\n        const audioSender = call.peerConnection.getSenders().find(s => s.track.kind === \"audio\");\r\n        if (audioSender) {\r\n          audioSender.replaceTrack(cameraStream.getAudioTracks()[0]);\r\n        }\r\n      });\r\n\r\n      setMyStream(cameraStream);\r\n      setIsScreenSharing(false);\r\n      setMuted(false);\r\n      setVideoOff(false);\r\n    } catch (err) {\r\n      console.error(\"Failed to revert to camera:\", err);\r\n    }\r\n  };\r\n\r\n  // Call peer ID entered by user\r\n  const callPeer = () => {\r\n    if (!peerIdToCall || !myStream) return;\r\n\r\n    const call = peerRef.current.call(peerIdToCall, myStream);\r\n    currentCallRefs.current.push(call);\r\n\r\n    call.on(\"stream\", (remoteStream) => {\r\n      setRemoteStreams((prev) => {\r\n        if (!prev.some((s) => s.id === remoteStream.id)) {\r\n          return [...prev, remoteStream];\r\n        }\r\n        return prev;\r\n      });\r\n    });\r\n\r\n    call.on(\"close\", () => {\r\n      setRemoteStreams((prev) => prev.filter(s => s.id !== call.remoteStream?.id));\r\n    });\r\n  };\r\n\r\n  // Leave call - clean up everything\r\n  const leaveCall = () => {\r\n    currentCallRefs.current.forEach(call => {\r\n      call.close();\r\n    });\r\n    currentCallRefs.current = [];\r\n    setRemoteStreams([]);\r\n    if (myStream) {\r\n      myStream.getTracks().forEach(track => track.stop());\r\n      setMyStream(null);\r\n    }\r\n    if (peerRef.current) {\r\n      peerRef.current.destroy();\r\n      peerRef.current = null;\r\n    }\r\n    onLogout();\r\n  };\r\n\r\n  return (\r\n    <div style={{ padding: 20 }}>\r\n      <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n        <h2>Welcome, {username}!</h2>\r\n        <button onClick={leaveCall} style={{ background: \"red\", color: \"white\", padding: \"8px\" }}>\r\n          Leave Call\r\n        </button>\r\n      </div>\r\n\r\n      <p>Your Peer ID: <b>{myPeerId}</b></p>\r\n\r\n      <div style={{ marginBottom: 20 }}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Enter peer ID to call\"\r\n          value={peerIdToCall}\r\n          onChange={(e) => setPeerIdToCall(e.target.value)}\r\n          style={{ marginRight: 10, padding: \"6px 8px\", width: 250 }}\r\n        />\r\n        <button onClick={callPeer} style={{ padding: \"6px 12px\" }}>Call</button>\r\n      </div>\r\n\r\n      {/* Controls toolbar */}\r\n      <div style={{ margin: \"10px 0\" }}>\r\n        <button\r\n          onClick={toggleMute}\r\n          style={{\r\n            backgroundColor: muted ? \"red\" : \"green\",\r\n            color: \"white\",\r\n            marginRight: 10,\r\n            padding: \"8px 16px\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          title={muted ? \"Unmute Microphone\" : \"Mute Microphone\"}\r\n        >\r\n          {muted ? \"Unmute Mic\" : \"Mute Mic\"}\r\n        </button>\r\n\r\n        <button\r\n          onClick={toggleVideo}\r\n          style={{\r\n            backgroundColor: videoOff ? \"red\" : \"green\",\r\n            color: \"white\",\r\n            marginRight: 10,\r\n            padding: \"8px 16px\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          title={videoOff ? \"Turn Video On\" : \"Turn Video Off\"}\r\n        >\r\n          {videoOff ? \"Start Video\" : \"Stop Video\"}\r\n        </button>\r\n\r\n        <button\r\n          onClick={startScreenShare}\r\n          style={{\r\n            backgroundColor: isScreenSharing ? \"#5555ff\" : \"#007bff\",\r\n            color: \"white\",\r\n            padding: \"8px 16px\",\r\n            borderRadius: \"4px\",\r\n            cursor: \"pointer\"\r\n          }}\r\n          title=\"Share Screen\"\r\n        >\r\n          {isScreenSharing ? \"Stop Sharing\" : \"Share Screen\"}\r\n        </button>\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Your Video</h3>\r\n        {myStream ? <VideoPlayer stream={myStream} isMuted={true} /> : <p>Loading your video...</p>}\r\n      </div>\r\n\r\n      <div>\r\n        <h3>Remote Videos</h3>\r\n        <div style={{ display: \"flex\", flexWrap: \"wrap\" }}>\r\n          {remoteStreams.map((stream, idx) => (\r\n            <VideoPlayer key={idx} stream={stream} isMuted={false} />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Room;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}